plugins {
    id 'application'
    id 'java'
    id 'jacoco'
    id 'com.diffplug.gradle.spotless' version '3.27.1'
    id "io.freefair.lombok" version "5.0.0-rc6"
}
mainClassName = 'edu.wpi.cs3733.c21.teamY.Main'

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://apisite.crmyers.dev/maven'
    }
}

dependencies {
    implementation(
            'de.jensd:fontawesomefx:8.9',
            'com.jfoenix:jfoenix:8.0.10',

            // You may comment out the database dependency you do not use
            'org.xerial:sqlite-jdbc:3.30.1',
            'org.apache.derby:derby:10.14.2.0',

            'org.slf4j:slf4j-api:1.7.30',
            'org.slf4j:slf4j-log4j12:1.7.30',
            'org.slf4j:slf4j-simple:1.7.30',
            'junit:junit:4.12'
    )
    compile group: 'de.jensd', name: 'fontawesomefx', version: '8.9'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.30'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
    compile group: 'org.apache.derby', name: 'derby', version: '10.14.2.0'
    compile group: 'com.jfoenix', name:'jfoenix', version: '8.0.10'
    testCompile(
            'de.jensd:fontawesomefx:8.9',
            "org.testfx:testfx-core:4.0.16-alpha",
            'org.junit.jupiter:junit-jupiter:5.6.0',
            'org.testfx:testfx-junit5:4.0.16-alpha',
            'org.slf4j:slf4j-log4j12:1.7.30',
    )

}


test {
    useJUnitPlatform()
}

jar {
    manifest {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
        attributes 'Main-Class': mainClassName,
                'Class-Path': configurations.runtime.files.collect { "$it.name"}.join(' ')
    }
    from configurations.runtime.collect { zipTree(it) }
}

def codeCoverageExcludes = [
        'edu.wpi.cs3733.c21.teamY.App',
        'edu.wpi.cs3733.c21.teamY.Main',
        'edu.wpi.cs3733.c21.teamY.pages.HomePageController',
        'edu.wpi.cs3733.c21.teamY.pages.LaundryPageController',
        'edu.wpi.cs3733.c21.teamY.pages.MaintenancePageController',
        'edu.wpi.cs3733.c21.teamY.pages.ServiceRequestPageController',
        'edu.wpi.cs3733.c21.teamY.pages.PathfindingPageController',
        'edu.wpi.cs3733.c21.teamY.entity.Node',
        'edu.wpi.cs3733.c21.teamY.entity.Edge',
        'edu.wpi.cs3733.c21.teamY.pages.MapController.MAP_PAGE',
        'edu.wpi.cs3733.c21.teamY.pages.CustomMapController',
        'edu.wpi.cs3733.c21.teamY.entity.Service',
        'edu.wpi.cs3733.c21.teamY.pages.GenericPage',
        'edu.wpi.cs3733.c21.teamY.pages.RequestsManagerController',
        'edu.wpi.cs3733.c21.teamY.pages.GenericServiceFormPage',
        'edu.wpi.cs3733.c21.teamY.pages.MapController',
        'edu.wpi.cs3733.c21.teamY.entity.ActiveGraph',
        'edu.wpi.cs3733.c21.teamY.pages.ServiceRequestInfoPageController',
        'edu.wpi.cs3733.c21.teamY.pages.MapController.CircleEx',
        'edu.wpi.cs3733.c21.teamY.pages.GraphEditPageController',
        'edu.wpi.cs3733.c21.teamY.pages.MapController.LineEx',
        'edu.wpi.cs3733.c21.teamY.dataops.DataOperations',
        'edu.wpi.cs3733.c21.teamY.algorithms.AlgorithmCalls'

]

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            excludes = codeCoverageExcludes
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            excludes = codeCoverageExcludes
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            excludes = codeCoverageExcludes
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport
compileJava.dependsOn 'spotlessApply'

spotless {
    java {
        googleJavaFormat()
    }
}
